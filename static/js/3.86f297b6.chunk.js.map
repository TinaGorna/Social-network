{"version":3,"sources":["hoc/WithAuthRedirect.tsx","components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/Dialogs.module.css","components/Dialogs/AddMessageForm/AddMessageForm.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","fake","props","restProps","to","module","exports","DialogItem","path","id","className","styles","dialog","src","avatar","alt","dialogName","name","Message","message","myMessage","messageTime","time","maxLengthCreator500","maxLengthCreator","AddMessageReduxForm","reduxForm","form","handleSubmit","sendMessage","onSubmit","sendMessageText","Field","component","Textarea","placeholder","wrap","validate","required","sendMessageBtn","Dialogs","dialogsElements","dialogsPage","dialogs","map","d","messagesElements","messages","m","dialogsWrapper","dialogsItems","values","newMessageBody","compose","dispatch","SendMessageActionCreator"],"mappings":"2LAaIA,EAA6B,SAACC,GAAD,MAA0B,CACvDC,OAAQD,EAAME,KAAKD,SAGhB,SAASE,EAAoBC,GAQhC,OADqCC,YAAiEN,EAA4B,CAACO,KAAM,cAApGD,EANwC,SAACE,GAAW,IAC/EN,EAA+BM,EAA/BN,OAAiBO,GAAcD,EAAvBD,KADsE,YAC/CC,EAD+C,oBAEpF,OAAKN,EAEE,cAACG,EAAD,eAAeI,IAFF,cAAC,IAAD,CAAUC,GAAI,gB,oBCnB1CC,EAAOC,QAAU,CAAC,OAAS,2BAA2B,WAAa,iC,oBCAnED,EAAOC,QAAU,CAAC,UAAY,2BAA2B,QAAU,yBAAyB,YAAc,+B,oBCA1GD,EAAOC,QAAU,CAAC,eAAiB,gCAAgC,aAAe,8BAA8B,SAAW,4B,oBCA3HD,EAAOC,QAAU,CAAC,YAAc,oCAAoC,gBAAkB,wCAAwC,eAAiB,yC,mGCehIC,EAXI,SAACL,GAChB,IAAIM,EAAO,oBAAsBN,EAAMO,GAEvC,OACI,sBAAKC,UAAWC,IAAOC,OAAvB,UACI,qBAAKC,IAAKX,EAAMY,OAAQC,IAAI,WAC5B,qBAAKL,UAAWC,IAAOK,WAAvB,SAAmC,cAAC,IAAD,CAASZ,GAAII,EAAb,SAAoBN,EAAMe,a,kBCM1DC,EAXC,SAAChB,GACb,OACI,sBAAKQ,UAA8B,mDAAlBR,EAAMiB,QAAgER,IAAOQ,QAAUR,IAAOS,UAA/G,UACKlB,EAAMiB,QACP,qBAAKT,UAAWC,IAAOU,YAAvB,SACKnB,EAAMoB,W,sECFjBC,EAAsBC,YAAiB,KAsB9BC,EAFaC,YAA+B,CAAEC,KAAM,yBAAvCD,EAlB6C,SAAC,GAAsB,IAApBE,EAAmB,EAAnBA,aACxE,OACI,uBAAMlB,UAAWC,IAAOkB,YAAaC,SAAUF,EAA/C,UACI,qBAAKlB,UAAWC,IAAOoB,gBAAvB,SACI,cAACC,EAAA,EAAD,CACIf,KAAK,iBACLgB,UAAWC,IACXC,YAAY,qBACZC,KAAK,OACLC,SAAU,CAACC,IAAUf,OAE7B,qBAAKb,UAAWC,IAAO4B,eAAvB,SACI,kDCoBDC,EAxBC,SAACtC,GAEb,IAAMuC,EAAkBvC,EAAMwC,YAAYC,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAuBpC,GAAIoC,EAAEpC,GAAIQ,KAAM4B,EAAE5B,KAAMH,OAAQ+B,EAAE/B,QAAxC+B,EAAEpC,OAExEqC,EAAmB5C,EAAMwC,YAAYK,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAoBvC,GAAIuC,EAAEvC,GAAIU,QAAS6B,EAAE7B,QAASG,KAAM0B,EAAE1B,MAA5C0B,EAAEvC,OAO7E,OACI,sBAAKC,UAAWC,IAAOsC,eAAvB,UACI,qBAAKvC,UAAWC,IAAOuC,aAAvB,SACKT,IAEL,qBAAK/B,UAAWC,IAAOoC,SAAvB,SACKD,IAEL,cAAC,EAAD,CAAqBhB,SAbP,SAACqB,GACnBjD,EAAM2B,YAAYsB,EAAOC,gBACzBD,EAAOC,eAAiB,W,kBCCjBC,sBACXrD,aAnBkB,SAACL,GACnB,MAAO,CACH+C,YAAa/C,EAAM+C,gBAIF,SAACY,GACtB,MAAO,CACHzB,YAAa,SAACuB,GACVE,EAASC,YAAyBH,SAW1CtD,IAFWuD,CAGbb","file":"static/js/3.86f297b6.chunk.js","sourcesContent":["import React, {ComponentType} from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { AppStateType } from \"../outside/redux-store\";\r\n\r\ntype MapStateToPropsType = {\r\n        isAuth: boolean\r\n}\r\n\r\ntype DispatchPropsType = {\r\n    fake: () => void\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect<P>(Component: React.ComponentType<P>) {\r\n    const RedirectComponent: React.FC<MapStateToPropsType & DispatchPropsType> = (props) => {\r\n        let { isAuth, fake, ...restProps } = props\r\n        if (!isAuth) return <Redirect to={'/login'} />\r\n\r\n        return <Component {...restProps as P} />\r\n    }\r\n    let ConnectedAuthRedirectComponent = connect<MapStateToPropsType, DispatchPropsType, P, AppStateType>(mapStateToPropsForRedirect, {fake: () => {}})(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogItem_dialog__1gBkg\",\"dialogName\":\"DialogItem_dialogName__3UTaS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myMessage\":\"Message_myMessage__3nwow\",\"message\":\"Message_message__vooI4\",\"messageTime\":\"Message_messageTime__1OViW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsWrapper\":\"Dialogs_dialogsWrapper__1wXBh\",\"dialogsItems\":\"Dialogs_dialogsItems__3NGy7\",\"messages\":\"Dialogs_messages__1RjS_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sendMessage\":\"AddMessageForm_sendMessage__3S5Qh\",\"sendMessageText\":\"AddMessageForm_sendMessageText__3JckC\",\"sendMessageBtn\":\"AddMessageForm_sendMessageBtn__39sCl\"};","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport styles from './DialogItem.module.css';\r\nimport {DialogType} from \"../../../outside/dialogs-reducer\";\r\n\r\nconst DialogItem = (props: DialogType) => {\r\n    let path = '/paviedamliennia/' + props.id\r\n\r\n    return (\r\n        <div className={styles.dialog}>\r\n            <img src={props.avatar} alt='dialog' />\r\n            <div className={styles.dialogName}><NavLink to={path}>{props.name}</NavLink></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\n\r\n\r\nimport styles from './Message.module.css';\r\nimport {MessageType} from \"../../../outside/dialogs-reducer\";\r\n\r\nconst Message = (props: MessageType) => {\r\n    return (\r\n        <div className={(props.message === 'I can bring dinner tonight, what do you think?') ? styles.message : styles.myMessage}>\r\n            {props.message}\r\n            <div className={styles.messageTime}>\r\n                {props.time}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message","import React from 'react'\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form'\r\n\r\nimport { AddMessagePropsType } from '../Dialogs'\r\nimport styles from './AddMessageForm.module.css';\r\nimport {Textarea} from \"../../Common/FormsControls/FormControl\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validatos\";\r\n\r\n\r\nconst maxLengthCreator500 = maxLengthCreator(500)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<AddMessagePropsType>> = ({ handleSubmit }) => {\r\n    return (\r\n        <form className={styles.sendMessage} onSubmit={handleSubmit}>\r\n            <div className={styles.sendMessageText}>\r\n                <Field\r\n                    name='newMessageBody'\r\n                    component={Textarea}\r\n                    placeholder='Enter your message'\r\n                    wrap='hard'\r\n                    validate={[required, maxLengthCreator500]} />\r\n            </div>\r\n            <div className={styles.sendMessageBtn}>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageReduxForm = reduxForm<AddMessagePropsType>({ form: 'dialogsAddMessageForm' })(AddMessageForm)\r\n\r\nexport default AddMessageReduxForm","import React from 'react';\r\n\r\n\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\n\r\nimport styles from './Dialogs.module.css';\r\nimport AddMessageReduxForm from './AddMessageForm/AddMessageForm';\r\nimport {DialogsPagePropsType} from \"../../outside/dialogs-reducer\";\r\n\r\ntype DialogsPropsType = {\r\n    dialogsPage: DialogsPagePropsType\r\n    sendMessage: (newMessageBody: string) => void\r\n}\r\n\r\nexport type AddMessagePropsType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n\r\n    const dialogsElements = props.dialogsPage.dialogs.map(d => <DialogItem key={d.id} id={d.id} name={d.name} avatar={d.avatar} />)\r\n\r\n    const messagesElements = props.dialogsPage.messages.map(m => <Message key={m.id} id={m.id} message={m.message} time={m.time} />)\r\n\r\n    const addNewMessage = (values: AddMessagePropsType) => {\r\n        props.sendMessage(values.newMessageBody)\r\n        values.newMessageBody = \" \"\r\n    }\r\n\r\n    return (\r\n        <div className={styles.dialogsWrapper}>\r\n            <div className={styles.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={styles.messages}>\r\n                {messagesElements}\r\n            </div>\r\n            <AddMessageReduxForm onSubmit={addNewMessage} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs","import { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\n\r\n\r\nimport Dialogs from './Dialogs';\r\nimport { withAuthRedirect } from '../../hoc/WithAuthRedirect';\r\nimport {ActionsType, AppStateType} from \"../../outside/redux-store\";\r\nimport {SendMessageActionCreator} from \"../../outside/dialogs-reducer\";\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: (action: ActionsType) => void) => {\r\n    return {\r\n        sendMessage: (newMessageBody: string) => {\r\n            dispatch(SendMessageActionCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\n// const AuthRedirectComponent = withAuthRedirect(Dialogs)\r\n\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent)\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)"],"sourceRoot":""}