{"version":3,"sources":["outside/dialogs-reducer.ts","outside/users-reducer.ts","api/api.tsx","components/Navbar/Navbar.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","reportWebVitals.js","components/Navbar/Navbar.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","outside/profile-reducer.ts","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Header/Header.tsx","outside/auth-reducer.ts","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","outside/app-reducer.ts","App.tsx","outside/redux-store.ts","index.tsx","utils/validators/validatos.ts","components/Common/FormsControls/FormControl.module.css","components/Header/Header.module.css","components/Common/FormsControls/FormControl.tsx","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/MyPosts.module.css","assets/images/Dowloader.svg","components/Common/Preloader/Downloader.tsx"],"names":["SEND_MESSAGE","initialState","messages","id","v1","message","time","dialogs","name","avatar","SendMessageActionCreator","newMessageBody","type","dialogsReducer","state","action","copyState","newMessage","trim","Date","getHours","getMinutes","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","users","pageSize","totalUsersCount","currentPage","isFetching","followingInProgress","followSuccess","userID","unfollowSuccess","setCurrentPage","setTotalUsersCount","toggleIsFetching","toggleIsFollowingProgress","userId","getUsersThunkCreator","dispatch","a","usersAPI","getUsers","response","items","totalCount","followUnfollowFlow","apiMethod","actionCreator","resultCode","followThunkCreator","follow","bind","unfollowThunkCreator","unfollow","usersReducer","map","u","followed","f","filter","instance","axios","create","withCredentials","baseURL","headers","get","then","data","post","delete","profileAPI","getProfile","getStatus","updateStatus","status","put","savePhoto","photoFile","formData","FormData","append","authAPI","getAuth","login","email","password","rememberMe","logout","module","exports","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Navbar","className","styles","nav","item","to","activeClassName","activeLink","Post","props","postItemWrapper","src","alt","postItem","postLikeTimeWrapper","postLike","liked","onClick","unlike","style","width","height","like","likesCount","postTime","MyPosts","React","memo","postsElements","posts","p","reverse","postsWrapper","postsTitle","AddNewPostReduxFrom","onSubmit","values","addPost","newPostText","maxLengthCreator500","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","Textarea","placeholder","wrap","validate","required","addPostBtn","ADD_POST","LIKE","UNLIKE","SET_USER_PROFILE","SET_STATUS","DELETE_POST","SAVE_PHOTO_SUCCESS","profile","aboutMe","contacts","facebook","website","vk","instagram","youtube","github","mainLink","lookingForAJob","lookingForAJobDescription","fullName","NaN","photos","small","large","setStatus","profileReducer","newPost","postID","MyPostsContainer","connect","profilePage","AddPostActionCreator","likeAC","unlikeAC","ProfileStatusWithHooks","useState","editMode","setEditMode","useEffect","profileInfoStatus","title","onDoubleClick","value","autoFocus","onBlur","updateUserStatus","onChange","e","currentTarget","ProfileInfo","Object","entries","forEach","key","push","profileInfoWrapper","profilephoto","profileInfoDescription","profileInfoName","myyogaclasses","profileInfoContacts","Downloader","Profile","isOwner","ProfileContainer","Number","this","match","params","authorizedUserId","history","getUserProfile","getUserStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","isAuth","withRouter","Header","header","logo","main","loginBlock","buttonLog","SET_USER_DATA","setAuthUserData","payload","getAuthUserDataThunkCreator","authReducer","HeaderContainer","LoginReduxForm","error","Input","formSummaryError","length","stopSubmit","_error","color","SET_INITIALIZED_SUCCESS","initialized","appReducer","DialogsContainer","lazy","UsersContainer","App","initializeApp","path","render","Suspense","fallback","app","promise","Promise","all","reducers","combineReducers","dialogsPage","usersPage","formReducer","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","document","getElementById","maxLength","input","meta","touched","hasError","formControl","Dowloader"],"mappings":"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","file":"static/js/main.be3100ba.chunk.js","sourcesContent":["import { v1 } from 'uuid'\r\nimport { ActionsType } from \"./redux-store\"\r\n\r\nexport type MessageType = {\r\n    id: string\r\n    message: string\r\n    time: string\r\n}\r\n\r\nexport type DialogType = {\r\n    id: string\r\n    name: string\r\n    avatar: string\r\n}\r\n\r\nexport type DialogsPagePropsType = {\r\n    messages: Array<MessageType>\r\n    dialogs: Array<DialogType>\r\n}\r\n\r\nexport type SendMessageActionType = {\r\n    type: 'SEND-MESSAGE'\r\n    newMessageBody: string\r\n}\r\n\r\n\r\nconst SEND_MESSAGE = 'SEND-MESSAGE'\r\n\r\nlet initialState = {\r\n    messages: [\r\n        { id: v1(), message: 'When is the next yoga class, Li?', time: '22:00' },\r\n        { id: v1(), message: 'I came from India, oh it was amazing', time: '10:00' },\r\n        { id: v1(), message: 'Can\\'t wait to see you. Brought so many thing for you', time: '11:00' },\r\n        { id: v1(), message: 'I can bring dinner tonight, what do you think?', time: '12:00' },\r\n        { id: v1(), message: 'Reunite you lol', time: '13:00' }\r\n    ],\r\n    dialogs: [\r\n        { id: v1(), name: 'Josephine', avatar: 'https://i.pinimg.com/564x/ec/5f/db/ec5fdb748c2a55e55ecb141929a66f70.jpg' },\r\n        { id: v1(), name: 'Volodya', avatar: 'https://i.pinimg.com/564x/11/2f/b4/112fb4c77d01ad300593664cb13a4c55.jpg' },\r\n        { id: v1(), name: 'Di', avatar: 'https://i.pinimg.com/564x/66/e1/b5/66e1b5ef286f9da7f02c89b215ced4f6.jpg' },\r\n        { id: v1(), name: 'Andrew', avatar: 'https://i.pinimg.com/564x/a6/5b/13/a65b13ddf43905ed7847d0c44b98cf7c.jpg' },\r\n        { id: v1(), name: 'Lech', avatar: 'https://i.pinimg.com/564x/36/83/aa/3683aab2d8dbf3120069089db9e21e96.jpg' },\r\n        { id: v1(), name: 'Karol', avatar: 'https://i.pinimg.com/564x/d3/8d/27/d38d27c2e13ca66d1e448604f067a290.jpg' }\r\n    ]\r\n}\r\n\r\nexport const dialogsReducer = (state: DialogsPagePropsType = initialState, action: ActionsType): DialogsPagePropsType => {\r\n    let copyState = { ...state };\r\n    switch (action.type) {\r\n        case SEND_MESSAGE: {\r\n            const newMessage: MessageType = {\r\n                id: v1(),\r\n                message: action.newMessageBody.trim(),\r\n                time: `${new Date().getHours()}:${(new Date().getMinutes() < 10) ? `0${new Date().getMinutes()}` : new Date().getMinutes()}`\r\n            }\r\n            if (newMessage.message !== '') {\r\n                copyState = { ...state, messages: [...state.messages, newMessage] }\r\n            }\r\n            return copyState\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const SendMessageActionCreator = (newMessageBody: string): SendMessageActionType => {\r\n    return {\r\n        type: SEND_MESSAGE,\r\n        newMessageBody\r\n    }\r\n}\r\n\r\nexport default dialogsReducer","import {usersAPI} from \"../api/api\"\r\nimport {ActionsType} from \"./redux-store\"\r\n\r\nexport type UserType = {\r\n    name: string\r\n    id: number\r\n    uniqueUrlName: string | null\r\n    photos: {\r\n        small: string | null\r\n        large: string | null\r\n    }\r\n    status: string | null\r\n    followed: boolean\r\n}\r\n\r\nexport type UsersPagePropsType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n}\r\n\r\nexport type FollowActionType = {\r\n    type: \"FOLLOW\"\r\n    userID: number\r\n}\r\n\r\nexport type UnfollowActionType = {\r\n    type: \"UNFOLLOW\"\r\n    userID: number\r\n}\r\n\r\nexport type SetUsersActionType = {\r\n    type: \"SET-USERS\"\r\n    users: Array<UserType>\r\n}\r\n\r\nexport type SetCurrentPageActionType = {\r\n    type: \"SET-CURRENT-PAGE\"\r\n    currentPage: number\r\n}\r\n\r\nexport type SetTotalUsersActionType = {\r\n    type: \"SET-TOTAL-USERS-COUNT\"\r\n    totalUsersCount: number\r\n}\r\n\r\nexport type ToggleIsFetchingActionType = {\r\n    type: \"TOGGLE-IS-FETCHING\"\r\n    isFetching: boolean\r\n}\r\n\r\nexport type ToggleIsFollowingProgressActionType = {\r\n    type: \"TOGGLE-IS-FOLLOWING-PROGRESS\"\r\n    isFetching: boolean\r\n    userId: number\r\n}\r\n\r\nexport type FakeActionType = {\r\n    type: \"FAKE\"\r\n    fake: number\r\n}\r\n\r\nconst FOLLOW = \"FOLLOW\"\r\nconst UNFOLLOW = \"UNFOLLOW\"\r\nconst SET_USERS = \"SET-USERS\"\r\nconst SET_CURRENT_PAGE = \"SET-CURRENT-PAGE\"\r\nconst SET_TOTAL_USERS_COUNT = \"SET-TOTAL-USERS-COUNT\"\r\nconst TOGGLE_IS_FETCHING = \"TOGGLE-IS-FETCHING\"\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = \"TOGGLE-IS-FOLLOWING-PROGRESS\"\r\n\r\nlet initialState = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [],\r\n\r\n}\r\n\r\nexport const usersReducer = (state: UsersPagePropsType = initialState, action: ActionsType): UsersPagePropsType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(f => {\r\n                    if (f.id === action.userID) {\r\n                        return {...f, followed: false}\r\n                    }\r\n                    return f\r\n                })\r\n            }\r\n        case SET_USERS: {\r\n            return {...state, users: action.users}\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {...state, totalUsersCount: action.totalUsersCount}\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const followSuccess = (userID: number): FollowActionType => {\r\n    return {\r\n        type: FOLLOW,\r\n        userID\r\n    }\r\n}\r\n\r\nexport const unfollowSuccess = (userID: number): UnfollowActionType => {\r\n    return {\r\n        type: UNFOLLOW,\r\n        userID\r\n    }\r\n}\r\n\r\nexport const setUsers = (users: Array<UserType>): SetUsersActionType => {\r\n    return {\r\n        type: SET_USERS,\r\n        users\r\n    }\r\n}\r\n\r\nexport const setCurrentPage = (currentPage: number): SetCurrentPageActionType => {\r\n    return {\r\n        type: SET_CURRENT_PAGE,\r\n        currentPage\r\n    }\r\n}\r\n\r\nexport const setTotalUsersCount = (totalUsersCount: number): SetTotalUsersActionType => {\r\n    return {\r\n        type: SET_TOTAL_USERS_COUNT,\r\n        totalUsersCount\r\n    }\r\n}\r\n\r\nexport const toggleIsFetching = (isFetching: boolean): ToggleIsFetchingActionType => {\r\n    return {\r\n        type: TOGGLE_IS_FETCHING,\r\n        isFetching\r\n    }\r\n}\r\n\r\nexport const toggleIsFollowingProgress = (isFetching: boolean, userId: number): ToggleIsFollowingProgressActionType => {\r\n    return {\r\n        type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n        isFetching,\r\n        userId\r\n    }\r\n}\r\n\r\nexport const getUsersThunkCreator = (currentPage: number, pageSize: number) => async (dispatch: (action: ActionsType) => void) => {\r\n    dispatch(toggleIsFetching(true))\r\n    dispatch(setCurrentPage(currentPage))\r\n    let response = await usersAPI.getUsers(currentPage, pageSize)\r\n    dispatch(toggleIsFetching(false))\r\n    dispatch(setUsers(response.items))\r\n    dispatch(setTotalUsersCount(response.totalCount))\r\n}\r\nconst followUnfollowFlow = async (dispatch: (action: ActionsType) => void, userId: number, apiMethod: (userId: number) => Promise<any>, actionCreator: (userID: number) => FollowActionType | UnfollowActionType) => {\r\n    dispatch(toggleIsFollowingProgress(true, userId))\r\n    let response = await apiMethod(userId)\r\n    if (response.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleIsFollowingProgress(false, userId))\r\n}\r\n\r\nexport const followThunkCreator = (userId: number) => async (dispatch: (action: ActionsType) => void) => {\r\n    followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), followSuccess)\r\n}\r\n\r\nexport const unfollowThunkCreator = (userId: number) => async (dispatch: (action: ActionsType) => void) => {\r\n    followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), unfollowSuccess)\r\n}\r\n\r\nexport default usersReducer","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    headers: {\r\n        \"API-KEY\": \"ba96ec03-2e8b-4f73-baef-40d56b705b47\"\r\n    }\r\n})\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number = 1, pageSize: number = 5) {\r\n        return instance\r\n            .get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    follow(userId: number) {\r\n        return instance\r\n            .post(`follow/${userId}`, {})\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance\r\n            .delete(`follow/${userId}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance\r\n            .get(`profile/` + userId)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance\r\n            .get(`profile/status/` + userId)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance\r\n            .put(`profile/status`, {status: status})\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    savePhoto(photoFile: string) {\r\n        const formData = new FormData();\r\n        formData.append('image', photoFile);\r\n\r\n        return instance.put(`profile/photo`,formData, {\r\n            headers: {\r\n                'Content-Type' : 'multipart/form-data'\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    getAuth() {\r\n        return instance\r\n            .get(`auth/me`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false) {\r\n        return instance\r\n            .post(`auth/login`, {email, password, rememberMe})\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    logout() {\r\n        return instance\r\n            .delete(`auth/login`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    }\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__co34_\",\"item\":\"Navbar_item__2eVXI\",\"activeLink\":\"Navbar_activeLink__3sogp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfoWrapper\":\"ProfileInfo_profileInfoWrapper__1PLC1\",\"profilephoto\":\"ProfileInfo_profilephoto__1eYPQ\",\"profileInfoName\":\"ProfileInfo_profileInfoName__1rQmQ\",\"profileInfoDescription\":\"ProfileInfo_profileInfoDescription__2Z_OC\",\"myyogaclasses\":\"ProfileInfo_myyogaclasses__2GHwa\",\"title\":\"ProfileInfo_title__H8NHG\",\"status\":\"ProfileInfo_status__1zT04\"};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport styles from \"./Navbar.module.css\";\r\n\r\n\r\nconst Navbar = () => {\r\n    return <nav className={styles.nav}>\r\n        <div className={styles.item}>\r\n            <NavLink to=\"/profile\" activeClassName={styles.activeLink}>My profile</NavLink>\r\n        </div>\r\n        <div className={styles.item}>\r\n            <NavLink to=\"/paviedamliennia\" activeClassName={styles.activeLink}>Messages</NavLink>\r\n        </div>\r\n        <div className={styles.item}>\r\n            <NavLink to=\"/users\" activeClassName={styles.activeLink}>Friends</NavLink>\r\n        </div>\r\n        <div className={styles.item}>\r\n            <NavLink to=\"/muzyka\" activeClassName={styles.activeLink}>My community</NavLink>\r\n        </div>\r\n        <div className={styles.item}>\r\n            <NavLink to=\"/naviny\" activeClassName={styles.activeLink}>Vlog</NavLink>\r\n        </div>\r\n        <div className={styles.item}>\r\n            <NavLink to=\"/nalady\" activeClassName={styles.activeLink}>Settings</NavLink>\r\n        </div>\r\n    </nav>\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport styles from './Post.module.css';\r\nimport Image from '../../../Common/images/image.svg'\r\n\r\ntype PostPropsType = {\r\n    id: string\r\n    message: string\r\n    time: string\r\n    liked: boolean\r\n    likesCount: number\r\n    like: (postID: string) => void\r\n    unlike: (postID: string) => void\r\n}\r\n\r\nconst Post = (props: PostPropsType) => {\r\n    return (\r\n        <div className={styles.postItemWrapper}>\r\n            <img src='https://i.pinimg.com/564x/e8/42/55/e842551f1287148f65da67e35daf2a39.jpg' alt='post' />\r\n            <div className={styles.postItem}>\r\n                {props.message}\r\n                {/*<div className={styles.postImage}>\r\n                    <img src={Image}/>\r\n                </div>*/}\r\n                <div className={styles.postLikeTimeWrapper}>\r\n                    <div className={styles.postLike}>\r\n                        {\r\n                            props.liked\r\n                                ? <button onClick={() => { props.unlike(props.id) }}>\r\n                                    <img src='https://iconarchive.com/download/i102621/graphicloads/flat-finance/dislike.ico' alt='like' style={{ width: '20px', height: '20px' }} />\r\n                                </button>\r\n                                : <button onClick={() => props.like(props.id)}>\r\n                                    <img src='https://cdn.worldvectorlogo.com/logos/facebook-like.svg' alt='dislike' style={{ width: '20px', height: '20px' }}/>\r\n                                </button>\r\n                        }\r\n                        <span>{props.likesCount}</span>\r\n                    </div>\r\n\r\n                    <div className={styles.postTime}>\r\n                        {props.time}\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from \"react\";\r\nimport Post from \"./Post/Post\";\r\nimport styles from \"./MyPosts.module.css\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {PostType} from \"../../../outside/profile-reducer\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validatos\";\r\nimport {Textarea} from \"../../Common/FormsControls/FormControl\";\r\n\r\ntype MyPostsPropsType = {\r\n    posts: Array<PostType>\r\n    addPost: (newPostText: string) => void\r\n    like: (postID: string) => void\r\n    unlike: (postID: string) => void\r\n}\r\n\r\ntype AddPostPropsType = {\r\n    newPostText: string\r\n}\r\n\r\nconst MyPosts = React.memo((props: MyPostsPropsType) => {\r\n\r\n    const postsElements = props.posts.map(p => <Post\r\n        key={p.id}\r\n        id={p.id}\r\n        message={p.message}\r\n        time={p.time}\r\n        liked={p.liked}\r\n        likesCount={p.likesCount}\r\n        like={props.like}\r\n        unlike={props.unlike}/>).reverse()\r\n\r\n    const onAddPost = (values: AddPostPropsType) => {\r\n        props.addPost(values.newPostText)\r\n        values.newPostText = \" \"\r\n    }\r\n\r\n    return (\r\n        <div className={styles.postsWrapper}>\r\n            <div className={styles.postsTitle}>\r\n                What's new?\r\n            </div>\r\n            <AddNewPostReduxFrom onSubmit={onAddPost}/>\r\n            <div className={styles.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst maxLengthCreator500 = maxLengthCreator(500)\r\n\r\nconst AddNewPostFrom: React.FC<InjectedFormProps<AddPostPropsType>> = (props) => {\r\n    return (\r\n        <form className={styles.addPost} onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    name=\"newPostText\"\r\n                    component={Textarea}\r\n                    placeholder=\"Add a note...\"\r\n                    wrap=\"hard\"\r\n                    validate={[required, maxLengthCreator500]}/>\r\n            </div>\r\n            <div className={styles.addPostBtn}>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostReduxFrom = reduxForm<AddPostPropsType>({form: \"profileAddNewPostFrom\"})(AddNewPostFrom)\r\n\r\nexport default MyPosts;","import {v1} from \"uuid\"\r\nimport {profileAPI} from \"../api/api\"\r\nimport {ActionsType} from \"./redux-store\"\r\n\r\nexport type PostType = {\r\n    id: string\r\n    message: string\r\n    time: string\r\n    liked: boolean\r\n    likesCount: number\r\n}\r\n\r\nexport type ContactType = {\r\n    facebook: string | null\r\n    website: string | null\r\n    vk: string | null\r\n    instagram: string | null\r\n    youtube: string | null\r\n    github: string | null\r\n    mainLink: string | null\r\n}\r\n\r\nexport type PhotoType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\nexport type ProfileType = {\r\n    aboutMe?: string\r\n    contacts: ContactType\r\n    lookingForAJob?: boolean\r\n    lookingForAJobDescription?: string\r\n    fullName?: string\r\n    userId?: number\r\n    photos?: PhotoType\r\n\r\n}\r\n\r\nexport type ProfilePagePropsType = {\r\n    profile: ProfileType /*| null*/\r\n    status: string\r\n    posts: Array<PostType>\r\n}\r\n\r\nexport type AddPostActionType = {\r\n    type: \"ADD-POST\"\r\n    newPostText: string\r\n}\r\n\r\nexport type LikePostActionType = {\r\n    type: \"LIKE-POST\"\r\n    postID: string\r\n}\r\n\r\nexport type UnlikePostActionType = {\r\n    type: \"UNLIKE-POST\"\r\n    postID: string\r\n}\r\n\r\nexport type SetUserProfileActionType = {\r\n    type: \"SET-USER-PROFILE\"\r\n    profile: ProfileType\r\n}\r\n\r\nexport type SetStatusActionType = {\r\n    type: \"SET-STATUS\"\r\n    status: string\r\n}\r\n\r\nexport type DeletePostActionType = {\r\n    type: \"DELETE-POST\"\r\n    postID: string\r\n}\r\n\r\nexport type SavePhotoActionType = {\r\n    type: \"SAVE_PHOTO_SUCCESS\"\r\n    photos: PhotoType\r\n}\r\n\r\nconst ADD_POST = \"ADD-POST\"\r\nconst LIKE = \"LIKE-POST\"\r\nconst UNLIKE = \"UNLIKE-POST\"\r\nconst SET_USER_PROFILE = \"SET-USER-PROFILE\"\r\nconst SET_STATUS = \"SET-STATUS\"\r\nconst DELETE_POST = \"DELETE-POST\"\r\nconst SAVE_PHOTO_SUCCESS = \"SAVE_PHOTO_SUCCESS\"\r\n\r\nexport let initialState = {\r\n    profile: {\r\n        aboutMe: \"\",\r\n        contacts: {\r\n            facebook: \"\",\r\n            website: \"\",\r\n            vk: \"\",\r\n            instagram: \"\",\r\n            youtube: \"\",\r\n            github: \"\",\r\n            mainLink: \"\"\r\n        },\r\n        lookingForAJob: false,\r\n        lookingForAJobDescription: \"\",\r\n        fullName: \"\",\r\n        userId: NaN,\r\n        photos: {\r\n            small: \"\",\r\n            large: \"\"\r\n        }\r\n    },\r\n    status: \"\",\r\n    posts: [\r\n        {\r\n            id: v1(),\r\n            message: \"Want to decorate the interior in purple shades? Not sure where to start?\" +\r\n                \"Where to get the cheapest wallpaper? How to save on furniture?\",\r\n            time: \"22:00\",\r\n            liked: true,\r\n            likesCount: 12\r\n        },\r\n        {\r\n            id: v1(),\r\n            message: \"Want to decorate the interior in purple shades? Not sure where to start?\" +\r\n                \"Where to get the cheapest wallpaper? How to save on furniture?\",\r\n            time: \"23:00\",\r\n            liked: false,\r\n            likesCount: 11\r\n        }\r\n    ]\r\n}\r\n\r\nconst profileReducer = (state: ProfilePagePropsType = initialState, action: ActionsType): ProfilePagePropsType => {\r\n    let copyState = {...state}\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            const newPost: PostType = {\r\n                id: v1(),\r\n                message: action.newPostText.trim(),\r\n                time: `${new Date().getHours()}:${(new Date().getMinutes() < 10) ? `0${new Date().getMinutes()}` : new Date().getMinutes()}`,\r\n                liked: false,\r\n                likesCount: 0\r\n            }\r\n            if (newPost.message !== \"\") {\r\n                copyState = {...state, posts: [...state.posts, newPost]}\r\n            }\r\n            return copyState\r\n        }\r\n        case LIKE:\r\n            return {\r\n                ...state,\r\n                posts: state.posts.map(p => {\r\n                    if (p.id === action.postID) {\r\n                        return {...p, liked: true, likesCount: p.likesCount + 1}\r\n                    }\r\n                    return p\r\n                })\r\n            }\r\n        case UNLIKE:\r\n            return {\r\n                ...state,\r\n                posts: state.posts.map(p => {\r\n                    if (p.id === action.postID) {\r\n                        return {...p, liked: false, likesCount: p.likesCount - 1}\r\n                    }\r\n                    return p\r\n                })\r\n            }\r\n        case SET_USER_PROFILE:\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case SET_STATUS:\r\n            return {\r\n                ...state, status: action.status\r\n            }\r\n        case DELETE_POST:\r\n            return {\r\n                ...state, posts: state.posts.filter(post => post.id !== action.postID)\r\n            }\r\n        case SAVE_PHOTO_SUCCESS:\r\n            return {\r\n                ...state, profile: {...state.profile, photos: action.photos}\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const AddPostActionCreator = (newPostText: string): AddPostActionType => {\r\n    return {\r\n        type: ADD_POST,\r\n        newPostText\r\n    }\r\n}\r\n\r\nexport const likeAC = (postID: string): LikePostActionType => {\r\n    return {\r\n        type: LIKE,\r\n        postID: postID\r\n    }\r\n}\r\n\r\nexport const unlikeAC = (postID: string): UnlikePostActionType => {\r\n    return {\r\n        type: UNLIKE,\r\n        postID: postID\r\n    }\r\n}\r\n\r\nexport const setUserProfile = (profile: ProfileType): SetUserProfileActionType => {\r\n    return {\r\n        type: SET_USER_PROFILE,\r\n        profile\r\n    }\r\n}\r\n\r\nexport const setStatus = (status: string): SetStatusActionType => {\r\n    return {\r\n        type: SET_STATUS,\r\n        status\r\n    }\r\n}\r\n\r\nexport const deletePost = (postID: string): DeletePostActionType => {\r\n    return {\r\n        type: DELETE_POST,\r\n        postID\r\n    }\r\n}\r\nexport const savePhotoSuccess = (photos: PhotoType): SavePhotoActionType => {\r\n    return {\r\n        type: SAVE_PHOTO_SUCCESS,\r\n        photos\r\n    }\r\n}\r\n\r\nexport const getUserProfileThunkCreator = (userId: number) => async (dispatch: (action: ActionsType) => void) => {\r\n    let response = await profileAPI.getProfile(userId)\r\n    dispatch(setUserProfile(response))\r\n}\r\n\r\nexport const getStatusThunkCreator = (userId: number) => async (dispatch: (action: ActionsType) => void) => {\r\n    let response = await profileAPI.getStatus(userId)\r\n    dispatch(setStatus(response))\r\n}\r\n\r\nexport const updateStatusThunkCreator = (status: string) => async (dispatch: (action: ActionsType) => void) => {\r\n    let response = await profileAPI.updateStatus(status)\r\n    if (!response.resultCode) {\r\n        dispatch(setStatus(status))\r\n    }\r\n}\r\nexport const savePhoto = (file: string) => async (dispatch: (action: ActionsType) => void ) => {\r\n    let response = await profileAPI.savePhoto(file);\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(savePhotoSuccess(response.data.data.photos))\r\n    }\r\n}\r\nexport default profileReducer","import { connect } from 'react-redux';\r\nimport MyPosts from './MyPosts';\r\nimport {ActionsType, AppStateType} from \"../../../outside/redux-store\";\r\nimport {AddPostActionCreator, likeAC, unlikeAC} from \"../../../outside/profile-reducer\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: (action: ActionsType) => void) => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(AddPostActionCreator(newPostText))\r\n        },\r\n        like: (postID: string) => {\r\n            dispatch(likeAC(postID))\r\n        },\r\n        unlike: (postID: string) => {\r\n            dispatch(unlikeAC(postID))\r\n        },\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;","import React, { ChangeEvent, useEffect, useState } from 'react';\r\nimport styles from './ProfileInfo.module.css';\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateUserStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    return (\r\n        <div className={styles.profileInfoStatus}>\r\n            <div className={styles.title}>\r\n\r\n            </div>\r\n            {\r\n                !editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || 'Add status'}</span>\r\n                </div>\r\n            }\r\n            {\r\n                editMode &&\r\n                <div>\r\n                    <input value={status} autoFocus={true} onBlur={deactivateEditMode} onChange={onStatusChange}></input>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport styles from \"./ProfileInfo.module.css\";\r\nimport {ProfileType} from \"../../../outside/profile-reducer\";\r\nimport Downloader from \"../../Common/Preloader/Downloader\";\r\n\r\nexport type ProfileInfoPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    /*savePhoto: (e: string) => void*/\r\n}\r\n\r\nconst ProfileInfo = (props: ProfileInfoPropsType) => {\r\n    let contacts: Array<any> = []\r\n    props.profile && Object.entries(props.profile.contacts).forEach(([key, value]) => contacts.push(<div\r\n        key={key}>{value !== null && value !== \"\" ? `${key}: ${value}` : ``}</div>))\r\n\r\n    if (!props.profile?.fullName) {\r\n        return <Downloader/>\r\n    }\r\n    /*const onMainPhotoSelected = (e: any) => { //нужно типизировать\r\n        if (e.target.files.length) {\r\n            props.savePhoto(e.target.files[0]);\r\n        }\r\n    }*/\r\n    return (\r\n        <div>\r\n            <div className={styles.profileInfoWrapper}>\r\n                <img className={styles.profilephoto}\r\n                     src=\"https://i.pinimg.com/564x/e8/42/55/e842551f1287148f65da67e35daf2a39.jpg\" alt=\"user\"/>\r\n               {/* {props.isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}*/}\r\n                <div className={styles.profileInfoDescription}>\r\n                    <div className={styles.profileInfoName}>Hello, Alina! What's new?</div>\r\n                    <ProfileStatusWithHooks status={props.status}\r\n                                            updateUserStatus={props.updateUserStatus}/>\r\n                    <div className={styles.myyogaclasses}>\r\n                        <div className={styles.title}>Join my Yoga classes</div>\r\n                        <div>{props.profile.lookingForAJobDescription}</div>\r\n                    </div>\r\n                    <div className={styles.title}>About me</div>\r\n                    <div>{props.profile.aboutMe}</div>\r\n                    <div className={styles.title}>My contacts</div>\r\n                    <div className={styles.profileInfoContacts}>{contacts}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport {ProfileType} from \"../../outside/profile-reducer\";\r\n\r\nexport type ProfilePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n   /* savePhoto: (e: string) => void*/\r\n}\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                /*savePhoto = {props.savePhoto}*/\r\n                isOwner = {props.isOwner}\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateUserStatus={props.updateUserStatus} />\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport Profile from \"./Profile\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getStatusThunkCreator,\r\n    getUserProfileThunkCreator,\r\n    ProfileType, savePhoto,\r\n    updateStatusThunkCreator\r\n} from \"../../outside/profile-reducer\";\r\nimport {AppStateType} from \"../../outside/redux-store\";\r\n\r\nexport type PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorizedUserId: number\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getUserStatus: (userId: number) => void\r\n    updateUserStatus: (status: string) => void\r\n    /*savePhoto: () => void*/\r\n}\r\n\r\ntype OwnPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\ntype ProfileContainerPropsType = RouteComponentProps<PathParamsType> & OwnPropsType\r\n\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\r\n    refreshProfile() {\r\n        let userId = Number(this.props.match.params.userId)\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getUserStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerPropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        /*if (this.props.match.params.userId !== this.prevProps.match.params.userId)*/\r\n            this.refreshProfile()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile\r\n                   /* savePhoto={this.props.savePhoto}*/\r\n                    isOwner = {!this.props.match.params.userId}\r\n                    {...this.props}\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateUserStatus={this.props.updateUserStatus}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfile: getUserProfileThunkCreator,\r\n        getUserStatus: getStatusThunkCreator,\r\n        updateUserStatus: updateStatusThunkCreator/*, savePhoto*/\r\n    }),\r\n    withRouter\r\n)(ProfileContainer);","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport styles from \"./Header.module.css\";\r\n\r\nexport type HeaderPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n    logout: () => void\r\n}\r\n\r\nconst Header = (props: HeaderPropsType) => {\r\n    return <header className={styles.header}>\r\n        <div className={styles.logo}>\r\n            <img src=\"https://i.pinimg.com/564x/e8/42/55/e842551f1287148f65da67e35daf2a39.jpg\" alt=\"logo\"/>\r\n            <div className={styles.main}>\r\n                <NavLink to=\"/profile\" className={styles.main}>IN TOUCH</NavLink>\r\n            </div>\r\n        </div>\r\n        <div className={styles.loginBlock}>\r\n            {props.isAuth\r\n                ? <div>{props.login}\r\n                    <button className={styles.buttonLog} onClick={props.logout}>LOG OUT</button>\r\n                </div>\r\n                : <NavLink to={\"/login\"}>Login</NavLink>\r\n            }\r\n        </div>\r\n    </header>\r\n}\r\n\r\nexport default Header;","import { FormAction, stopSubmit } from \"redux-form\"\r\nimport { ThunkAction, ThunkDispatch } from \"redux-thunk\"\r\nimport { authAPI } from \"../api/api\"\r\nimport { ActionsType, AppStateType } from \"./redux-store\"\r\n\r\nexport type AuthPropsType = {\r\n    userId: number | null\r\n    login: string | null\r\n    email: string | null\r\n    isAuth: boolean\r\n}\r\n\r\nexport type SetUserDataActionType = {\r\n    type: 'SET-USER-DATA'\r\n    payload: AuthPropsType\r\n}\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionsType>\r\n\r\nconst SET_USER_DATA = 'SET-USER-DATA'\r\n\r\nlet initialState = {\r\n    userId: null,\r\n    login: null,\r\n    email: null,\r\n    isAuth: false\r\n}\r\n\r\nexport const authReducer = (state: AuthPropsType = initialState, action: ActionsType): AuthPropsType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA: {\r\n            return { ...state, ...action.payload }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (userId: number | null, login: string | null, email: string | null, isAuth: boolean): SetUserDataActionType => {\r\n    return {\r\n        type: SET_USER_DATA,\r\n        payload: { userId, login, email, isAuth }\r\n    }\r\n}\r\n\r\n/*export const getAuthUserDataThunkCreator = (): ThunkType => {\r\n    return (dispatch: ThunkDispatch<AppStateType, unknown, ActionsType>) => {\r\n        return authAPI.getAuth()\r\n            .then(data => {\r\n                if (data.resultCode === 0) {\r\n                    const { id, login, email } = data.data\r\n                    dispatch(setAuthUserData(id, login, email, true))\r\n                }\r\n            })\r\n    }\r\n}*/\r\nexport const getAuthUserDataThunkCreator = (): ThunkType => async (dispatch) => {\r\n    let response = await authAPI.getAuth();\r\n                if (response.resultCode === 0) {\r\n                    const { id, login, email } = response.data\r\n                    dispatch(setAuthUserData(id, login, email, true))\r\n                }\r\n}\r\n\r\n/*export const loginThunkCreator = (email: string, password: string, rememberMe: boolean): ThunkType => {\r\n    return (dispatch: ThunkDispatch<AppStateType, unknown, ActionsType | FormAction>) => {\r\n        authAPI.login(email, password, rememberMe)\r\n            .then(data => {\r\n                if (data.resultCode === 0) {\r\n                    dispatch(getAuthUserDataThunkCreator())\r\n                } else {\r\n                    let message = data.messages.length > 0 ? data.messages[0] : 'Some error'\r\n                    dispatch(stopSubmit('login', { _error: message }))\r\n                }\r\n            })\r\n    }\r\n}*/\r\nexport const loginThunkCreator = (email: string, password: string, rememberMe: boolean): ThunkType => async (dispatch: ThunkDispatch<AppStateType, unknown, ActionsType | FormAction>) => {\r\n       let response = await authAPI.login(email, password, rememberMe)\r\n                if (response.resultCode === 0) {\r\n                    dispatch(getAuthUserDataThunkCreator())\r\n                } else {\r\n                    let message = response.messages.length > 0 ? response.messages[0] : 'Some error'\r\n                    dispatch(stopSubmit('login', { _error: message }))\r\n                }\r\n}\r\n\r\n/*export const logoutThunkCreator = (): ThunkType => {\r\n    return (dispatch: ThunkDispatch<AppStateType, unknown, ActionsType>) => {\r\n        authAPI.logout()\r\n            .then(data => {\r\n                if (data.resultCode === 0) {\r\n                    dispatch(setAuthUserData(null, null, null, false))\r\n                }\r\n            })\r\n    }\r\n}*/\r\nexport const logoutThunkCreator = (): ThunkType => async (dispatch: ThunkDispatch<AppStateType, unknown, ActionsType>) => {\r\n        let response = await authAPI.logout()\r\n        if (response.resultCode === 0) {\r\n            dispatch(setAuthUserData(null, null, null, false))\r\n        }\r\n    }\r\n\r\n\r\nexport default authReducer","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Header from './Header';\r\nimport {AppStateType} from \"../../outside/redux-store\";\r\nimport {logoutThunkCreator} from \"../../outside/auth-reducer\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    logout: () => void\r\n}\r\n\r\ntype HeaderContainerPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerPropsType> {\r\n    render() {\r\n        return <Header {...this.props} isAuth={this.props.isAuth} login={this.props.login} />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { logout: logoutThunkCreator })(HeaderContainer);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { Redirect } from 'react-router-dom';\r\nimport styles from '../Common/FormsControls/FormControl.module.css'\r\nimport {Input} from \"../Common/FormsControls/FormControl\";\r\nimport {required} from \"../../utils/validators/validatos\";\r\nimport {AppStateType} from \"../../outside/redux-store\";\r\nimport {loginThunkCreator} from \"../../outside/auth-reducer\";\r\n\r\ntype FormDataType = {\r\n    login: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\n\r\ntype MapDispatchToPropsType = {\r\n    login: (login: string, password: string, rememberMe: boolean) => void\r\n}\r\n\r\ntype LoginPropsType = MapStatePropsType & MapDispatchToPropsType\r\n\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = ({ handleSubmit, error }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    placeholder={'Login'}\r\n                    component={Input}\r\n                    validate={[required]}\r\n                    name={'login'} />\r\n            </div>\r\n            <div>\r\n                <Field\r\n                    placeholder={'Password'}\r\n                    component={Input}\r\n                    validate={[required]}\r\n                    name={'password'}\r\n                    type={'password'} />\r\n            </div>\r\n            <div>\r\n                <Field\r\n                    component={Input}\r\n                    type={'checkbox'}\r\n                    validate={[required]}\r\n                    name={'rememberMe'} />\r\n                <span>Remember me</span>\r\n            </div>\r\n            { error && <div className={styles.formSummaryError}>{error}</div> }\r\n            <div>\r\n                <button>Sign in</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({ form: 'login' })(LoginForm)\r\n\r\nconst Login: React.FC<LoginPropsType> = (props) => {\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.login(formData.login, formData.password, formData.rememberMe)\r\n    }\r\n\r\n    if(props.isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return <div style={{ color: 'white' }}>\r\n        <h1>LOGIN</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} />\r\n    </div>\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { login: loginThunkCreator })(Login);","import { ThunkAction, ThunkDispatch } from \"redux-thunk\"\r\nimport { getAuthUserDataThunkCreator } from \"./auth-reducer\"\r\nimport { ActionsType, AppStateType } from \"./redux-store\"\r\n\r\nexport type AppPropsType = {\r\n    initialized: boolean\r\n}\r\n\r\nexport type InitializedSuccessActionType = {\r\n    type: 'SET-INITIALIZED-SUCCESS'\r\n}\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionsType>\r\n\r\nconst SET_INITIALIZED_SUCCESS = 'SET-INITIALIZED-SUCCESS'\r\n\r\nlet initialState = {\r\n    initialized: false\r\n}\r\n\r\nexport const appReducer = (state: AppPropsType = initialState, action: ActionsType): AppPropsType => {\r\n    switch (action.type) {\r\n        case SET_INITIALIZED_SUCCESS: {\r\n            return { ...state, initialized: true }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const initializedSuccess = (): InitializedSuccessActionType => {\r\n    return {\r\n        type: SET_INITIALIZED_SUCCESS\r\n    }\r\n}\r\n\r\nexport const initializeThunkCreator = (): ThunkType => {\r\n    return (dispatch: ThunkDispatch<AppStateType, unknown, ActionsType>) => {\r\n        let promise = dispatch(getAuthUserDataThunkCreator())\r\n        Promise.all([promise])\r\n            .then(() => {\r\n                dispatch(initializedSuccess())\r\n            })\r\n    }\r\n}\r\n\r\nexport default appReducer","import React from \"react\";\nimport {Route, withRouter} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {compose} from \"redux\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport Login from \"./components/Login/Login\";\nimport \"./App.css\";\nimport Downloader from \"./components/Common/Preloader/Downloader\";\nimport {AppStateType} from \"./outside/redux-store\";\nimport {initializeThunkCreator} from \"./outside/app-reducer\";\n\nconst DialogsContainer = React.lazy(() => import(\"./components/Dialogs/DialogsContainer\"))\nconst UsersContainer = React.lazy(() => import(\"./components/Users/UsersContainer\"))\n\n\ntype MapStateToPropsPropsType = {\n    initialized: boolean\n}\n\ntype MapDispatchToPropsType = {\n    initializeApp: () => void\n}\n\nclass App extends React.Component<MapStateToPropsPropsType & MapDispatchToPropsType> {\n\n    componentDidMount() {\n        this.props.initializeApp()\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Downloader/>\n        }\n\n        return (\n            <div className=\"app-wrapper\">\n                <HeaderContainer/>\n                <Navbar/>\n                <div className=\"app-wrapper-content\">\n                    <Route path=\"/login\"\n                           render={() => <Login/>}/>\n                    <Route path=\"/profile/:userId?\"\n                           render={() => <ProfileContainer/>}/>\n                    <Route path=\"/paviedamliennia\"\n                           render={() => {\n                               return <React.Suspense fallback={<div>Loading...</div>}>\n                                   <DialogsContainer/>\n                               </React.Suspense>\n                           }}/>\n                    <Route path=\"/users\"\n                           render={() => {\n                               return <React.Suspense fallback={<div>Loading...</div>}>\n                                   <UsersContainer/>\n                               </React.Suspense>\n                           }}/>\n\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsPropsType => {\n    return {\n        initialized: state.app.initialized\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {initializeApp: initializeThunkCreator}),\n    withRouter\n)(App);","import { applyMiddleware, combineReducers, createStore } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { reducer as formReducer } from 'redux-form';\r\n\r\nimport profileReducer, {\r\n    AddPostActionType,\r\n    DeletePostActionType,\r\n    LikePostActionType,\r\n    SavePhotoActionType,\r\n    SetStatusActionType,\r\n    SetUserProfileActionType,\r\n    UnlikePostActionType\r\n} from \"./profile-reducer\"\r\nimport dialogsReducer, { SendMessageActionType } from './dialogs-reducer'\r\nimport usersReducer, {\r\n    FollowActionType, SetUsersActionType, SetCurrentPageActionType,\r\n    UnfollowActionType, SetTotalUsersActionType, ToggleIsFetchingActionType,\r\n    ToggleIsFollowingProgressActionType,\r\n    FakeActionType,\r\n} from './users-reducer'\r\nimport authReducer, { SetUserDataActionType } from \"./auth-reducer\";\r\nimport appReducer, { InitializedSuccessActionType } from './app-reducer';\r\n\r\ntype ReducersType = typeof reducers\r\n\r\nexport type AppStateType = ReturnType<ReducersType>\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    form: formReducer\r\n})\r\n\r\nlet store  = createStore(reducers, applyMiddleware(thunkMiddleware))\r\n\r\n\r\n\r\nexport type ActionsType =\r\n    AddPostActionType\r\n    | SendMessageActionType\r\n    | LikePostActionType\r\n    | UnlikePostActionType\r\n    | SetUserProfileActionType\r\n    | SetStatusActionType\r\n    | FollowActionType\r\n    | UnfollowActionType\r\n    | SetUsersActionType\r\n    | SetCurrentPageActionType\r\n    | SetTotalUsersActionType\r\n    | ToggleIsFetchingActionType\r\n    | SetUserDataActionType\r\n    | ToggleIsFollowingProgressActionType\r\n    | InitializedSuccessActionType\r\n    | FakeActionType\r\n    | DeletePostActionType\r\n    | SavePhotoActionType\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {HashRouter} from \"react-router-dom\";\nimport { Provider } from 'react-redux';\nimport reportWebVitals from './reportWebVitals';\nimport App from './App';\nimport './index.css';\nimport store from \"./outside/redux-store\";\n\n//для смены URL относительно не домена, а папки для BrowserRouter basename = {process.env.PUBLIC_URL}\n\nlet rerenderEntireTree = () => {\n    ReactDOM.render(\n        <HashRouter>\n            <Provider store={store}>\n                <App />\n            </Provider >\n        </HashRouter>,\n        document.getElementById('root')\n    );\n}\n\nrerenderEntireTree();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","export const required = (value: string) => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControl_formControl__21AJ1\",\"error\":\"FormControl_error__2mHd0\",\"formSummaryError\":\"FormControl_formSummaryError__2U345\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__UTTH7\",\"loginBlock\":\"Header_loginBlock__2pyim\",\"buttonLog\":\"Header_buttonLog__2Ntcn\",\"logo\":\"Header_logo__1IuYM\",\"main\":\"Header_main__2I1K1\"};","import React from \"react\";\r\nimport styles from \"./FormControl.module.css\"\r\n\r\ntype TextAreaPropsType = {\r\n    input: any\r\n    meta: any\r\n}\r\n\r\nexport const Textarea: React.FC<TextAreaPropsType> = ({input, meta: {touched, error}, ...props}) => {\r\n    // console.log(meta)\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <textarea {...input} {...props} />\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const Input: React.FC<TextAreaPropsType> = ({input, meta: {touched, error}, ...props}) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <input {...input} {...props} />\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    );\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postItemWrapper\":\"Post_postItemWrapper__3tJB8\",\"postItem\":\"Post_postItem__tZp7u\",\"postLikeTimeWrapper\":\"Post_postLikeTimeWrapper__3a7WT\",\"postTime\":\"Post_postTime__kVdht\",\"postLike\":\"Post_postLike__3W2aa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsWrapper\":\"MyPosts_postsWrapper__3J2Ao\",\"postsTitle\":\"MyPosts_postsTitle__nOX9Z\",\"addPost\":\"MyPosts_addPost__gWkQX\",\"addPostBtn\":\"MyPosts_addPostBtn__3pDHW\",\"posts\":\"MyPosts_posts__2qi7z\"};","export default __webpack_public_path__ + \"static/media/Dowloader.bbbf0991.svg\";","import React from \"react\";\r\nimport Dowloader from \"../../../assets/images/Dowloader.svg\";\r\n\r\nconst Downloader = () => {\r\n    return <div>\r\n        <img alt={\"please wait\"} src={Dowloader}/>\r\n    </div>\r\n}\r\n\r\nexport default Downloader;"],"sourceRoot":""}